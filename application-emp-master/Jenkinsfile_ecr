pipeline {
    agent any
     environment {
    COSIGN_PASSWORD=credentials('cosign-password')
    COSIGN_PRIVATE_KEY=credentials('cosign-private-key')
    COSIGN_PUBLIC_KEY=credentials('cosign-public-key')
    DOCKER_REPO_URL='ghcr.io/7shivam/application-emp'

  }
     
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'github-token', url: 'https://github.com/7shivam/application-emp.git']]])
            }
        }
        stage('mvn Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('appthreat/sast-scan') {
            steps {
                sh 'docker run --rm -e "WORKSPACE=${PWD}" -v ~/.m2:/.m2 -v $WORKSPACE/application-emp:/app quay.io/appthreat/sast-scan scan --src /app --type java --out_dir /app/reports'
            }
        }
        stage('Code Quality'){
            steps{
                withSonarQubeEnv('sonar'){
                    sh 'mvn -f pom.xml sonar:sonar'
                }
            }
        }
        stage('Junit Test') {
            steps {
                junit keepLongStdio: true, testResults: 'target/surefire-reports/*.xml'
              
            }
        }
        stage('Jacoco Report') {
            steps {
                jacoco()
            }

        }
        stage('docker image Build') {
            steps {
                sh 'docker build -t $DOCKER_REPO_URL:$BUILD_NUMBER .'
            }
        }
        stage('Login to github') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-token', passwordVariable: 'pass', usernameVariable: 'user')]) {
                    sh 'docker login ghcr.io -u 7shivam -p $pass'
                }
            }
        }
        stage('push image to github') {
            steps {
                sh 'docker push $DOCKER_REPO_URL:$BUILD_NUMBER'
            }
        }
        stage('sign the github image') {
            steps {
                sh 'cosign version'
                sh 'cosign sign --key $COSIGN_PRIVATE_KEY $DOCKER_REPO_URL:$BUILD_NUMBER'
            }
        }
        stage('verify the github image') {
            steps {
                sh 'cosign version'
                sh 'cosign verify --key $COSIGN_PUBLIC_KEY $DOCKER_REPO_URL:$BUILD_NUMBER'
            }
        }
        
      
        
    }
}
